#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define swap(a, b) {\
    __typeof(a) __temp = a;\
    a = b; b = __temp;\
}

typedef struct Data {
    int pi, di;
} Data;


typedef struct Heap {
    Data *data;
    int size, length;
} Heap;


void init(Heap *h, int length_input) {
    h->data = (Data *)malloc(sizeof(Data) * length_input);
    h->size = 0;
    h->length = length_input;
}

int cmp(Data a, Data b) {
    if(a.pi < b.pi) return 1;
    if(a.pi == b.pi && a.di < b.di) return 1;
    return 0;
}

void push(Heap *h, Data value) {
    if(h->size >= h->length) return ;
    h->data[h->size] = value;
    int ind, f;
    ind = h->size;
    f = (ind - 1) / 2;
    while (cmp(h->data[ind], h->data[f])) {
        swap(h->data[ind], h->data[f]);
        ind = f;
        f = (ind - 1)  / 2;
    }
    h->size++;
}


Data top(Heap *h) {
    return h->data[0];
}

int empty(Heap *heap) {
    return heap->size == 0;
}


void update(Heap *h, int pos, int n) {
	int lchild = 2 * pos + 1, rchild = 2 * pos + 2;
    int max_value = pos;
    if (lchild < n && cmp(h->data[lchild] , h->data[max_value])) {
        max_value = lchild;
    }
    if (rchild < n && cmp(h->data[rchild] , h->data[max_value])) {
        max_value = rchild;
    }
    if (max_value != pos) {
        swap(h->data[pos], h->data[max_value]);
        update(h, max_value, n);
    }
}

void pop(Heap *h) {
    if(h->size == 0) return ;
    swap(h->data[0], h->data[h->size - 1]);
    h->size--;
    update(h, 0, h->size);
}

void heap_sort(Heap *h) {
    for(int i = h->size - 1; i >= 1; i--) {
        swap(h->data[i], h->data[0]);
        update(h, 0, i);
    }
}

void clear(Heap *h) {
    free(h->data);
    free(h);
}

void output(Heap *h) {
    for(int i = 0 ; i < h ->size; i++) {
        printf("%d %d\n", h->data[i].pi, h->data[i].di);
    }
    printf("\n");
}

int main() {
    int n, m, a[1100];
    scanf("%d", &m);
    for(int l = 1; l <= m; l++) {
        Heap *heap = (Heap *)malloc(sizeof(Heap));
        Data data;
        scanf("%d", &n);
        init(heap, n);
        int ans = 0;
        for(int i = 1; i <= n; i++) {
            scanf("%d %d", &data.pi, &data.di);
            push(heap, data);
        }
        //output(heap);
	    int i = 1;
        while(!empty(heap)) {
            data = top(heap);
            pop(heap);
            ans = data.pi;
            if(i % 2) {
                data.pi += data.di;
                push(heap, data);
                //output(heap);
                //if(!empty(heap)) {
                //    printf("%d\n", i);
                //    printf("%d\n", heap->data[i].pi);
                //}
            }
            //if(i % 2 == 0) continue;
            i++;
        }
        printf("%d\n", ans);
        clear(heap);
    }
    return 0;
}
